/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package item_manager;
//create imports for the necessary java libraries
import javax.swing.*;
import java.util.*;
import java.io.*;
import java.time.LocalDate;
import javax.swing.table.*;
import javax.swing.event.*;
/**
 *
 * @author Jeffr
 */
public class mainform extends JFrame implements Serializable {
    //array list to store all the items in the program
    public static ArrayList<Item> ItemInventory = new ArrayList<Item>();
    //keep what data should be in the table!
    public static ArrayList<Item> SearchInventory = new ArrayList<Item>();
    //current item index
    public static int itemIndex;
    //text in search box
    public static String SearchItemDesc;

    
    //create the table headings for the table
    Object[] headings = { "Item Description" , "Quantity", "Expiration Date", "Location"};
    
    //List to use for handling items
    private ArrayList<Item> inventory = new ArrayList<Item>();
    
    DefaultTableModel tableModel = new DefaultTableModel()
{
    @Override
    public Class getColumnClass (int column)
    {
        if(column == 1)
        {
            return Integer.class;
        }
        else
        {
            return Object.class;
        }
    }  
}; 

    /**
     * Creates new form main form.
     */
    public mainform() 
    {
        initComponents();
        
        Search();

        //add the headings to the table model
        for(int index= 0; index < headings.length; index++)
        {
            tableModel.addColumn(headings[index]);
            
        }
        //set the table model
        tableItems.setModel(tableModel);
     
        setJTableColumnsWidth(tableItems, 480, 50, 10, 20, 20);
    }
    public static void setJTableColumnsWidth(JTable table, int tablePreferredWidth,
        double... percentages) {
    double total = 0;
    for (int i = 0; i < table.getColumnModel().getColumnCount(); i++) {
        total += percentages[i];
    }
 
    for (int i = 0; i < table.getColumnModel().getColumnCount(); i++) {
        TableColumn column = table.getColumnModel().getColumn(i);
        column.setPreferredWidth((int)
                (tablePreferredWidth * (percentages[i] / total)));
    }
}

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new ButtonGroup();
        buttonGroup2 = new ButtonGroup();
        jScrollPane1 = new JScrollPane();
        tableItems = new JTable();
        jPanel1 = new JPanel();
        jLabel1 = new JLabel();
        textBoxSearch = new JTextField();
        buttonSearch = new JButton();
        jPanel2 = new JPanel();
        jScrollPane2 = new JScrollPane();
        textAreaSuggestions = new JTextArea();
        jPanel4 = new JPanel();
        radioButtonToday = new JRadioButton();
        radioButtonOne = new JRadioButton();
        RadioButtonTwo = new JRadioButton();
        radioButtonThree = new JRadioButton();
        radioButtonFour = new JRadioButton();
        jPanel3 = new JPanel();
        radioButtonFridge = new JRadioButton();
        radioButtonFreezer = new JRadioButton();
        radioButtonPantry = new JRadioButton();
        radioButtonAll = new JRadioButton();
        jMenuBar1 = new JMenuBar();
        jMenu1 = new JMenu();
        menuItemAdd = new JMenuItem();
        menuItemRemove = new JMenuItem();
        menuItemModify = new JMenuItem();
        jSeparator1 = new JPopupMenu.Separator();
        menuItemExit = new JMenuItem();
        jMenu2 = new JMenu();
        menuItemAbout = new JMenuItem();

        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
        setTitle("Food Manager");
        setLocationByPlatform(true);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        tableItems.setAutoCreateRowSorter(true);
        tableItems.setModel(new DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Item Description", "Quantity", "Expiration Date", "Location"
            }
        ));
        tableItems.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        jScrollPane1.setViewportView(tableItems);

        jPanel1.setBorder(BorderFactory.createTitledBorder("Search"));

        jLabel1.setText("Item Description:");

        buttonSearch.setText("Search");
        buttonSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonSearchActionPerformed(evt);
            }
        });

        GroupLayout jPanel1Layout = new GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addGroup(GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jLabel1)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(textBoxSearch, GroupLayout.PREFERRED_SIZE, 151, GroupLayout.PREFERRED_SIZE))
                    .addComponent(buttonSearch, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(textBoxSearch, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(buttonSearch, GroupLayout.PREFERRED_SIZE, 58, GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jPanel2.setBorder(BorderFactory.createTitledBorder("Suggestions:"));
        jPanel2.setPreferredSize(new java.awt.Dimension(285, 137));

        textAreaSuggestions.setColumns(20);
        textAreaSuggestions.setRows(5);
        jScrollPane2.setViewportView(textAreaSuggestions);

        jPanel4.setBorder(BorderFactory.createTitledBorder("Max days to expiration"));

        buttonGroup2.add(radioButtonToday);
        radioButtonToday.setText("today");
        radioButtonToday.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radioButtonTodayActionPerformed(evt);
            }
        });

        buttonGroup2.add(radioButtonOne);
        radioButtonOne.setText("1");
        radioButtonOne.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radioButtonOneActionPerformed(evt);
            }
        });

        buttonGroup2.add(RadioButtonTwo);
        RadioButtonTwo.setText("2");
        RadioButtonTwo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RadioButtonTwoActionPerformed(evt);
            }
        });

        buttonGroup2.add(radioButtonThree);
        radioButtonThree.setText("3");
        radioButtonThree.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radioButtonThreeActionPerformed(evt);
            }
        });

        buttonGroup2.add(radioButtonFour);
        radioButtonFour.setSelected(true);
        radioButtonFour.setText("4");
        radioButtonFour.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radioButtonFourActionPerformed(evt);
            }
        });

        GroupLayout jPanel4Layout = new GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addComponent(radioButtonOne)
                    .addComponent(radioButtonToday)
                    .addComponent(RadioButtonTwo)
                    .addComponent(radioButtonThree)
                    .addComponent(radioButtonFour))
                .addContainerGap(57, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addComponent(radioButtonToday)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(radioButtonOne)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(RadioButtonTwo)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(radioButtonThree)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(radioButtonFour)
                .addContainerGap(20, Short.MAX_VALUE))
        );

        GroupLayout jPanel2Layout = new GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jScrollPane2, GroupLayout.DEFAULT_SIZE, 324, Short.MAX_VALUE)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel4, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2)
            .addGroup(GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jPanel4, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
        );

        jPanel3.setBorder(BorderFactory.createTitledBorder("Filter by Location:"));

        buttonGroup1.add(radioButtonFridge);
        radioButtonFridge.setText("Fridge");
        radioButtonFridge.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radioButtonFridgeActionPerformed(evt);
            }
        });

        buttonGroup1.add(radioButtonFreezer);
        radioButtonFreezer.setText("Freezer");
        radioButtonFreezer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radioButtonFreezerActionPerformed(evt);
            }
        });

        buttonGroup1.add(radioButtonPantry);
        radioButtonPantry.setText("Pantry");
        radioButtonPantry.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radioButtonPantryActionPerformed(evt);
            }
        });

        buttonGroup1.add(radioButtonAll);
        radioButtonAll.setSelected(true);
        radioButtonAll.setText("All");
        radioButtonAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radioButtonAllActionPerformed(evt);
            }
        });

        GroupLayout jPanel3Layout = new GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addComponent(radioButtonFridge)
                    .addComponent(radioButtonFreezer)
                    .addComponent(radioButtonPantry)
                    .addComponent(radioButtonAll))
                .addContainerGap(21, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(radioButtonFridge)
                .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(radioButtonFreezer)
                .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(radioButtonPantry)
                .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(radioButtonAll)
                .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jMenu1.setText("Manage Items");

        menuItemAdd.setText("Add Item");
        menuItemAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemAddActionPerformed(evt);
            }
        });
        jMenu1.add(menuItemAdd);

        menuItemRemove.setText("Remove Item");
        menuItemRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemRemoveActionPerformed(evt);
            }
        });
        jMenu1.add(menuItemRemove);

        menuItemModify.setText("Modify Item");
        menuItemModify.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemModifyActionPerformed(evt);
            }
        });
        jMenu1.add(menuItemModify);
        jMenu1.add(jSeparator1);

        menuItemExit.setText("Exit");
        menuItemExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemExitActionPerformed(evt);
            }
        });
        jMenu1.add(menuItemExit);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Help");

        menuItemAbout.setText("about");
        menuItemAbout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemAboutActionPerformed(evt);
            }
        });
        jMenu2.add(menuItemAbout);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        GroupLayout layout = new GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel1, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel3, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel2, GroupLayout.DEFAULT_SIZE, 470, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, GroupLayout.PREFERRED_SIZE, 259, GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, GroupLayout.DEFAULT_SIZE, 179, Short.MAX_VALUE)
                    .addComponent(jPanel1, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel3, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void menuItemExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemExitActionPerformed
        // TODO add your handling code here:
        
        //final save
        serializeData();
        //close program
        System.exit(0);
    }//GEN-LAST:event_menuItemExitActionPerformed

    private void menuItemAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemAddActionPerformed
        // TODO add your handling code here:
        //open the dialog to add an item
        additem addDlg = new additem(this,true);
        addDlg.setVisible(true);
        
         //check if the user pressed ok
        //then add it to the item invt.
        if(addDlg.isPressedOK())
        {
            //get the user enetered data abvout the item
            String desc = addDlg.getDescription();
            int quant = (int) addDlg.getQuantity();
            LocalDate d = addDlg.getExpDate();
            String locat = addDlg.getLocat();
            
            //create local item objcet, place info gathered from dialog into it
            Item i = new Item(desc,quant,d,locat);
            //add new item to the arraylist
            ItemInventory.add(i);
       
            //set the inventory to this, which will update the table
            setInventory(ItemInventory);
            //save the data that has been added
            serializeData();
        }
        
        Search();
    }//GEN-LAST:event_menuItemAddActionPerformed

    private void menuItemModifyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemModifyActionPerformed
        // TODO add your handling code here:
        
        //get which item the user wanted to modify
        itemIndex = tableItems.getSelectedRow();
        //if the user doesn't select an item in the list
        if(itemIndex == -1)
        {
            // open a diaolog to tell the user they need to select something
            warningdialog warnDlg = new warningdialog(this,true);
            warnDlg.setVisible(true);
        }
        else
        {
        itemIndex = tableItems.convertRowIndexToModel(itemIndex);
        
        
        //search for that item desc
        for(int indexa = 0; indexa <= SearchInventory.size(); indexa++)
        {
            if(indexa == itemIndex)//if item is what you are looking for
            {
                //set item to the index
                Item i = SearchInventory.get(indexa);
               //loop to find the rigth item in array list
               for(indexa= 0; indexa <= SearchInventory.size(); indexa++)
               {
                   SearchItemDesc = i.getDescription();
               }
               String tempdesc = i.getDescription();
            }
        }
        //'fix' table
        setInventory(ItemInventory);
        //
        for(int indexb =0; indexb < ItemInventory.size(); indexb++)
        {
            Item i = ItemInventory.get(indexb);
            String compareVar = i.getDescription();
            
            if(compareVar.equals(SearchItemDesc))
            {
                itemIndex = indexb;
            }
        }

       
        
        
        
        // open the modify dialog
        modifyitem moddlg = new modifyitem(this,true);
        moddlg.setVisible(true);
        
        
        //check if the user pressed ok
        //then add it to the item invt.
        if(moddlg.isPressedOK())
        {
            ItemInventory.remove(itemIndex);
            //set the itemIndex so it can get hit by the modify item class...
            //itemIndex = invIndex;

            //grab data to replace old spot
            String desc = moddlg.getDescription();
            int quant = (int) moddlg.getQuantity();
            LocalDate d = moddlg.getExpDate();
            String locat = moddlg.getLocat();

            //create local item objct   item
            Item i = new Item(desc,quant,d,locat);
            //add new item to the arraylist, at the spot the old item was in
            ItemInventory.add(itemIndex, i);
            
            //set to the inventory, and then table
            setInventory(ItemInventory);
            //save data
            serializeData();
        }
        else
        {
            // do nothing, the item wasn't modified...
        }
        }
        
        //reset table to search
        Search();
        
    }//GEN-LAST:event_menuItemModifyActionPerformed

    private void menuItemAboutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemAboutActionPerformed
        // TODO add your handling code here:
        //open about dialog
        aboutform aboutdlg = new aboutform(this,true);
        aboutdlg.setVisible(true);
    }//GEN-LAST:event_menuItemAboutActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        // TODO add your handling code here:
        //load data to the array list
        desererializeData();
        //set inventory list, which will alos place data into the table model
        setInventory(ItemInventory);
        //check for suggestions
        checkForSuggestions();
        //update table model fully
        Search();
        
    }//GEN-LAST:event_formWindowOpened

    private void menuItemRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemRemoveActionPerformed
        // TODO add your handling code here:
        //get it to what user sees(because sorting)
        //updateInvFromTable();
        //get row to remove
        itemIndex = tableItems.getSelectedRow();
        
        //check a row is selected
        if(itemIndex == -1)
        {
            //show warning dialog if a row isn't selected by the user
            warningdialog warndlg = new warningdialog(this,true);
            warndlg.setVisible(true);
        }
        else
        {  
        
        
        
        
        //update with table model locations
        itemIndex = tableItems.convertRowIndexToModel(itemIndex);
        
        //search for that item desc
        for(int indexa = 0; indexa <= SearchInventory.size(); indexa++)
        {
            if(indexa == itemIndex)//if item is what you are looking for
            {
                //set item to the index
                Item i = SearchInventory.get(indexa);
               //loop to find the rigth item in array list
               for(indexa= 0; indexa <= SearchInventory.size(); indexa++)
               {
                   SearchItemDesc = i.getDescription();
               }
               String tempdesc = i.getDescription();
            }
        }
        //'fix' table
        setInventory(ItemInventory);
        //
        for(int indexb =0; indexb < ItemInventory.size(); indexb++)
        {
            Item i = ItemInventory.get(indexb);
            String compareVar = i.getDescription();
            
            if(compareVar.equals(SearchItemDesc))
            {
                itemIndex = indexb;
            }
        }
           
        //find selected item
      ItemInventory.remove(itemIndex);
      //update inv , update the table
      setInventory(ItemInventory);
      //save data
      serializeData();
      
      Search();
        }
    }//GEN-LAST:event_menuItemRemoveActionPerformed

    private void radioButtonFridgeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radioButtonFridgeActionPerformed
        // TODO add your handling code here:
        
        ArrayList<Item> tempINV = new ArrayList<Item>();
        int RC=0;
        //clear the table of all rows
        tableModel.setRowCount(0);
        //loop through the inventory array list
        //get data to add to the row
        for(int index = 0; index < SearchInventory.size(); index++)
        {
            //get item
            Item i = SearchInventory.get(index);
            //check if item is in the pantry
            if(i.getLocation().equals("Fridge"))
            {
                //create row data of item
            Object[] rowData = new Object[]{i.getDescription(),(int) i.getQuantity(), i.getExpDate().toString(), i.getLocation()};
                //add the data to the table model
            tableModel.addRow(rowData); 
            String tdesc = i.getDescription();
            int tquant = (int) i.getQuantity();
            LocalDate tld = i.getExpDate();
            String tlocat = i.getLocation();
              
            Item itm = new Item(tdesc, tquant, tld, tlocat);
            
            tempINV.add(itm);
            RC ++;
            }
            else
            {
                //do nothing, not in pantry
            }
        }
        //update SearchInventory to tableModel
        SearchInventory.clear();

        for(int indexc=0; indexc <= RC; indexc++)
        {
            SearchInventory.add(tempINV.get(indexc));
        }
                
        //update with table model locations
        itemIndex = tableItems.convertRowIndexToModel(itemIndex);
        
        
    }//GEN-LAST:event_radioButtonFridgeActionPerformed

    private void radioButtonFreezerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radioButtonFreezerActionPerformed
        // TODO add your handling code here:
        ArrayList<Item> tempINV = new ArrayList<Item>();
        int RC=0;
        //clear the table of all rows
        tableModel.setRowCount(0);
        //loop through the inventory array list
        //get data to add to the row
        for(int index = 0; index < SearchInventory.size(); index++)
        {
            //get item
            Item i = SearchInventory.get(index);
            //check if item is in the pantry
            if(i.getLocation().equals("Freezer"))
            {
                //create row data of item
            Object[] rowData = new Object[]{i.getDescription(),(int) i.getQuantity(), i.getExpDate().toString(), i.getLocation()};
                //add the data to the table model
            tableModel.addRow(rowData); 
            String tdesc = i.getDescription();
            int tquant = (int) i.getQuantity();
            LocalDate tld = i.getExpDate();
            String tlocat = i.getLocation();
              
            Item itm = new Item(tdesc, tquant, tld, tlocat);
            
            tempINV.add(itm);
            RC ++;
            }
            else
            {
                //do nothing, not in pantry
            }
        }
        //update SearchInventory to tableModel
        SearchInventory.clear();

        for(int indexc=0; indexc <= RC; indexc++)
        {
            SearchInventory.add(tempINV.get(indexc));
        }
                
        //update with table model locations
        itemIndex = tableItems.convertRowIndexToModel(itemIndex);
        
        
    }//GEN-LAST:event_radioButtonFreezerActionPerformed

    private void radioButtonPantryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radioButtonPantryActionPerformed
        // TODO add your handling code here:
        ArrayList<Item> tempINV = new ArrayList<Item>();
        int RC=0;
        //clear the table of all rows
        tableModel.setRowCount(0);
        //loop through the inventory array list
        //get data to add to the row
        for(int index = 0; index < SearchInventory.size(); index++)
        {
            //get item
            Item i = SearchInventory.get(index);
            //check if item is in the pantry
            if(i.getLocation().equals("Pantry"))
            {
                //create row data of item
            Object[] rowData = new Object[]{i.getDescription(),(int) i.getQuantity(), i.getExpDate().toString(), i.getLocation()};
                //add the data to the table model
            tableModel.addRow(rowData); 
            String tdesc = i.getDescription();
            int tquant = (int) i.getQuantity();
            LocalDate tld = i.getExpDate();
            String tlocat = i.getLocation();
              
            Item itm = new Item(tdesc, tquant, tld, tlocat);
            
            tempINV.add(itm);
            RC ++;
            }
            else
            {
                //do nothing, not in pantry
            }
        }
        //update SearchInventory to tableModel
        SearchInventory.clear();

        for(int indexc=0; indexc <= RC; indexc++)
        {
            SearchInventory.add(tempINV.get(indexc));
        }
                
        //update with table model locations
        itemIndex = tableItems.convertRowIndexToModel(itemIndex);
        
        
        
    }//GEN-LAST:event_radioButtonPantryActionPerformed

    private void radioButtonAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radioButtonAllActionPerformed
        // TODO add your handling code here:
        
        // ArrayList<Item> tempINV = new ArrayList<Item>();
        //int RC=0;
        Search();
        //clear the table of all rows
        tableModel.setRowCount(0);
        
        //loop through the inventory array list
        //get data to add to the row
        
        
        for(int index = 0; index < SearchInventory.size(); index++)
        {
            //get item
            Item i = SearchInventory.get(index);
            //check if item is in the pantry
           
                //create row data of item
            Object[] rowData = new Object[]{i.getDescription(),(int) i.getQuantity(), i.getExpDate().toString(), i.getLocation()};
                //add the data to the table model
            tableModel.addRow(rowData); 
            String tdesc = i.getDescription();
            int tquant = (int) i.getQuantity();
            LocalDate tld = i.getExpDate();
            String tlocat = i.getLocation();
              
            Item itm = new Item(tdesc, tquant, tld, tlocat);
            
            //tempINV.add(itm);
           // RC ++;

        }
        //update SearchInventory to tableModel
      //  SearchInventory.clear();

       // for(int indexc=0; indexc <= RC; indexc++)
        {
      //      SearchInventory.add(tempINV.get(indexc));
        }
                
        //update with table model locations
      //  itemIndex = tableItems.convertRowIndexToModel(itemIndex);
        
    }//GEN-LAST:event_radioButtonAllActionPerformed

    private void buttonSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonSearchActionPerformed
        // TODO add your handling code here:
      Search();
        
    }//GEN-LAST:event_buttonSearchActionPerformed

    public void Search()
    {
         //string entered into the textbox to be compared against item descriptions
        String searchkey = textBoxSearch.getText();
        //clear the table
        tableModel.setRowCount(0);
        //clear serach inventory
        SearchInventory.clear();
        
        for( int index=0; index < inventory.size(); index++ )
        {
            //get the item
            Item i = ItemInventory.get(index);
            
            //if the item has the user entered string in it, then 
            if(i.getDescription().contains(searchkey))
            {
                //create row data of item
            Object[] rowData = new Object[]{i.getDescription(),(int) i.getQuantity(), i.getExpDate().toString(), i.getLocation()};
                //add the data to the table model
            tableModel.addRow(rowData); 
            //add to search inventory
            SearchInventory.add(i);
            }
            else
            {
                //do nothing, item desc. doesn't contain the searchkey
            }    
        }
        

    }
    
    
    private void radioButtonTodayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radioButtonTodayActionPerformed
        // TODO add your handling code here:
        //update suggestions
        checkForSuggestions();
    }//GEN-LAST:event_radioButtonTodayActionPerformed

    private void radioButtonOneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radioButtonOneActionPerformed
        // TODO add your handling code here:
        //update suggestions
        checkForSuggestions();
    }//GEN-LAST:event_radioButtonOneActionPerformed

    private void RadioButtonTwoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RadioButtonTwoActionPerformed
        // TODO add your handling code here:
        //update suggestions
        checkForSuggestions();
    }//GEN-LAST:event_RadioButtonTwoActionPerformed

    private void radioButtonThreeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radioButtonThreeActionPerformed
        // TODO add your handling code here:
        //update suggestions
        checkForSuggestions();
    }//GEN-LAST:event_radioButtonThreeActionPerformed

    private void radioButtonFourActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radioButtonFourActionPerformed
        // TODO add your handling code here:
        //update suggestions
        checkForSuggestions();
    }//GEN-LAST:event_radioButtonFourActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (UIManager.LookAndFeelInfo info : UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(mainform.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(mainform.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(mainform.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(mainform.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new mainform().setVisible(true);
                
            }
        });
       
    }
    

    
    private void serializeData()
    {
        //take data from ItemInventory, and store it in a new data file
         try 
         {
         FileOutputStream fileOut = new FileOutputStream("Itemdata.dat");
         ObjectOutputStream out = new ObjectOutputStream(fileOut);
         out.writeObject(ItemInventory);
         out.close();
         fileOut.close();
         System.out.printf("Serialized data is saved in Itemdata.dat");
            
         }
         catch (IOException i) 
         {
         i.printStackTrace();
         }
    }
    
    private void desererializeData()
    {
       // load the data to the arrayList ItemInventory
         try {
         FileInputStream fileIn = new FileInputStream("Itemdata.dat");
         ObjectInputStream in = new ObjectInputStream(fileIn);
         ItemInventory = (ArrayList<Item>) in.readObject();
         in.close();
         fileIn.close();
      } catch (IOException i) {
         i.printStackTrace();
         return;
      } catch (ClassNotFoundException c) {
         System.out.println("ItemInventory class not found");
         c.printStackTrace();
         return;
      } 
        
    }
    
    
    //create a method to update the table
    private void updateTable()
    {
        //clear the table of all rows
        tableModel.setRowCount(0);
        //loop through the inventory array list
        //get data to add to the row
        for(int index = 0; index < ItemInventory.size(); index++)
        {
            Item i = ItemInventory.get(index);
            //create row data of item
            Object[] rowData = new Object[]{i.getDescription(),((int) i.getQuantity()), i.getExpDate().toString(), i.getLocation()};
            //add the data to the table model

            tableModel.addRow(rowData);
        }
        checkForSuggestions();
        

        
    }
    
    private void checkForSuggestions()
    {
       //get the date of the curent time
        LocalDate ld = LocalDate.now();
            
   
        textAreaSuggestions.setText("");

        //create booleans to use for keeping track of if the user wants items with however many days left before expiration 
        boolean today = false;//0 days
        boolean one = false;//1 day
        boolean two = false;//2 days
        boolean three = false;//3 days
        boolean four = false;//4 days
        
        // if user selected the RB 4
        if(radioButtonFour.isSelected() == true)
        {
            today = true;
            one = true;
            two = true;
            three = true;
            four = true;
        }
        // if user selected the RB 3
        if(radioButtonThree.isSelected() == true)
        {
            today = true;
            one = true;
            two = true;
            three = true;
        }
        // if user selected the RB 2
        if(RadioButtonTwo.isSelected() == true)
        {
            today = true;
            one = true;
            two = true;
        }
        // if user selected the RB 1
        if(radioButtonOne.isSelected() == true)
        {
            today = true;
            one = true;  
        }
        // if user selected the RB today
        if(radioButtonToday.isSelected() == true)
        {
            today = true;
        }
                //for all in the inventory
        for(int index = 0; index < ItemInventory.size(); index++)
        {
            //store data for the string being added
            String tempvar1;
            //get the item that will need to be processed
            Item i = ItemInventory.get(index);

            //create the checknumber
            int checknum;
            //set the checknum
            checknum = ld.plusDays(4).compareTo(i.getExpDate());
            
            
            if(checknum >= 0)//check for dates...
            {
               if(ld.plusDays(4).compareTo(i.getExpDate()) == 0 && four == true)
                {
                    //set the Suggestions info to 4 days
                    tempvar1 = i.getDescription();
                    textAreaSuggestions.setText(textAreaSuggestions.getText()+ tempvar1 + " (Expires in 4 more days) \n" );
                }
                else if(ld.plusDays(3).compareTo(i.getExpDate()) == 0 && three == true)
                {
                    //set the Suggestions info to 3 days
                    tempvar1 = i.getDescription();
                    textAreaSuggestions.setText(textAreaSuggestions.getText()+ tempvar1 + " (Expires in 3 more days) \n");
                }
                else if(ld.plusDays(2).compareTo(i.getExpDate()) == 0 && two == true)
                {
                    //set the Suggestions info to 2 days 
                    tempvar1 = i.getDescription();
                    textAreaSuggestions.setText(textAreaSuggestions.getText()+ tempvar1 + " (Expires in 2 more days) \n");
                }
                else if(ld.plusDays(1).compareTo(i.getExpDate()) == 0 && one == true)
                {
                    //set the Suggestions info 1 day
                    tempvar1 = i.getDescription();
                    textAreaSuggestions.setText(textAreaSuggestions.getText()+ tempvar1 + " (Expires in 1 more day) \n");
                }
                else if(ld.plusDays(0).compareTo(i.getExpDate()) == 0 && today == true)
                {
                    //set the Suggestions info to today 
                    tempvar1 = i.getDescription();
                    textAreaSuggestions.setText(textAreaSuggestions.getText()+ tempvar1 + " (Expires Today) \n");
                }
               
                else if(ld.plusDays(0).compareTo(i.getExpDate()) >= 0)
                {
                    //set suggestions info for expired foods
                    tempvar1 = i.getDescription();
                    textAreaSuggestions.setText(textAreaSuggestions.getText() + tempvar1 + "  (expired) \n");
                }
            }
            if(checknum < 0)
            {
               // this food has a lot of time left, so do nothing...
            }
        }  
    }
    
   
     public void setInventory(ArrayList<Item> inv)
    {
        // get the table updated with the applicable data
        inventory = inv;
        updateTable();
    }

    public ArrayList<Item> getItemInventory() {
        //make item inventory availaible as needed, inlcuding other classes
        return ItemInventory;
    }

    public void setItemInventory(ArrayList<Item> ItemInventory) {
        //set the item inventories changes
        this.ItemInventory = ItemInventory;
    }
    
    public int getItemIndex()
    {
        //get the item index as needed
        return itemIndex;
    }
    
    public void updateInvFromTable()
    {


        //current update
        int invsize = ItemInventory.size();
        ItemInventory.clear();
        for(int index =0; index <= invsize-1; index++)
        {
            String tempd = tableItems.getValueAt(index,0).toString();
            int tempq = Integer.parseInt((tableItems.getValueAt(index,1)).toString());
            LocalDate tempdate = LocalDate.parse((CharSequence) tableItems.getValueAt(index,2));
            String templ = tableItems.getValueAt(index,3).toString();
            
            //create local item objcet, place info gathered from dialog into it
            Item i = new Item(tempd,tempq,tempdate,templ);
            //add new item to the arraylist
            ItemInventory.add(i);
        }
        
    }


    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private JRadioButton RadioButtonTwo;
    private ButtonGroup buttonGroup1;
    private ButtonGroup buttonGroup2;
    private JButton buttonSearch;
    private JLabel jLabel1;
    private JMenu jMenu1;
    private JMenu jMenu2;
    private JMenuBar jMenuBar1;
    private JPanel jPanel1;
    private JPanel jPanel2;
    private JPanel jPanel3;
    private JPanel jPanel4;
    private JScrollPane jScrollPane1;
    private JScrollPane jScrollPane2;
    private JPopupMenu.Separator jSeparator1;
    private JMenuItem menuItemAbout;
    private JMenuItem menuItemAdd;
    private JMenuItem menuItemExit;
    private JMenuItem menuItemModify;
    private JMenuItem menuItemRemove;
    private JRadioButton radioButtonAll;
    private JRadioButton radioButtonFour;
    private JRadioButton radioButtonFreezer;
    private JRadioButton radioButtonFridge;
    private JRadioButton radioButtonOne;
    private JRadioButton radioButtonPantry;
    private JRadioButton radioButtonThree;
    private JRadioButton radioButtonToday;
    private JTable tableItems;
    private JTextArea textAreaSuggestions;
    private JTextField textBoxSearch;
    // End of variables declaration//GEN-END:variables
}
